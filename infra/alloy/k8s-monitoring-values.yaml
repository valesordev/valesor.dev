cluster:
  name: local.valesor.dev
destinations:
  - name: grafana-cloud-metrics
    type: prometheus
    url: https://prometheus-us-central1.grafana.net/api/prom/push
    auth:
      type: basic
      usernameKey: prometheus
      passwordKey: cloudKey
    secret:
      create: false
      name: grafana-cloud-credentials
      namespace: alloy
  - name: grafana-cloud-logs
    type: loki
    url: https://logs-prod-017.grafana.net/loki/api/v1/push
    auth:
      type: basic
      usernameKey: loki
      passwordKey: cloudKey
    secret:
      create: false
      name: grafana-cloud-credentials
      namespace: alloy
  - name: grafana-cloud-traces
    type: otlp
    url: https://tempo-us-central1.grafana.net:443
    protocol: grpc
    auth:
      type: basic
      usernameKey: tempo
      passwordKey: cloudKey
    secret:
      create: false
      name: grafana-cloud-credentials
      namespace: alloy
    metrics:
      enabled: false
    logs:
      enabled: false
    traces:
      enabled: true
  - name: grafana-cloud-profiles
    type: pyroscope
    url: https://profiles-prod-003.grafana.net:443
    auth:
      type: basic
      usernameKey: pyroscope
      passwordKey: cloudKey
    secret:
      create: false
      name: grafana-cloud-credentials
      namespace: alloy
clusterMetrics:
  enabled: true
  controlPlane:
    enabled: true
  opencost:
    enabled: false
  kepler:
    enabled: false
prometheusOperatorObjects:
  enabled: true
clusterEvents:
  enabled: true
podLogs:
  enabled: true
applicationObservability:
  enabled: true
  receivers:
    otlp:
      grpc:
        enabled: true
        port: 4317
      http:
        enabled: true
        port: 4318
    zipkin:
      enabled: false
  connectors:
    grafanaCloudMetrics:
      enabled: true
autoInstrumentation:
  enabled: true
profiling:
  enabled: true
alloy-metrics:
  enabled: true
  alloy:
    stabilityLevel: public-preview
    extraEnv:
      - name: GCLOUD_RW_API_KEY
        valueFrom:
          secretKeyRef:
            name: grafana-cloud-credentials
            namespace: alloy
            key: cloudKey
      - name: GCLOUD_FM_USER
        valueFrom:
          secretKeyRef:
            name: grafana-cloud-credentials
            namespace: alloy
            key: fleetmanagement
      - name: CLUSTER_NAME
        value: local.valesor.dev
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: GCLOUD_FM_COLLECTOR_ID
        value: grafana-k8s-monitoring-$(CLUSTER_NAME)-$(NAMESPACE)-$(POD_NAME)
  remoteConfig:
    enabled: true
    url: https://fleet-management-prod-001.grafana.net
    auth:
      type: basic
      username: sys.env("GCLOUD_FM_USER")
      passwordFrom: sys.env("GCLOUD_RW_API_KEY")
alloy-singleton:
  enabled: true
  alloy:
    stabilityLevel: public-preview
    extraEnv:
      - name: GCLOUD_RW_API_KEY
        valueFrom:
          secretKeyRef:
            name: grafana-cloud-credentials
            namespace: alloy
            key: cloudKey
      - name: GCLOUD_FM_USER
        valueFrom:
          secretKeyRef:
            name: grafana-cloud-credentials
            namespace: alloy
            key: fleetmanagement
      - name: CLUSTER_NAME
        value: local.valesor.dev
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: GCLOUD_FM_COLLECTOR_ID
        value: grafana-k8s-monitoring-$(CLUSTER_NAME)-$(NAMESPACE)-$(POD_NAME)
  remoteConfig:
    enabled: true
    url: https://fleet-management-prod-001.grafana.net
    auth:
      type: basic
      username: sys.env("GCLOUD_FM_USER")
      passwordFrom: sys.env("GCLOUD_RW_API_KEY")
alloy-logs:
  enabled: true
  alloy:
    stabilityLevel: public-preview
    extraEnv:
      - name: GCLOUD_RW_API_KEY
        valueFrom:
          secretKeyRef:
            name: grafana-cloud-credentials
            namespace: alloy
            key: cloudKey
      - name: GCLOUD_FM_USER
        valueFrom:
          secretKeyRef:
            name: grafana-cloud-credentials
            namespace: alloy
            key: fleetmanagement
      - name: CLUSTER_NAME
        value: local.valesor.dev
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            fieldPath: spec.nodeName
      - name: GCLOUD_FM_COLLECTOR_ID
        value: grafana-k8s-monitoring-$(CLUSTER_NAME)-$(NAMESPACE)-alloy-logs-$(NODE_NAME)
  remoteConfig:
    enabled: true
    url: https://fleet-management-prod-001.grafana.net
    auth:
      type: basic
      username: sys.env("GCLOUD_FM_USER")
      passwordFrom: sys.env("GCLOUD_RW_API_KEY")
alloy-receiver:
  enabled: true
  alloy:
    extraPorts:
      - name: otlp-grpc
        port: 4317
        targetPort: 4317
        protocol: TCP
      - name: otlp-http
        port: 4318
        targetPort: 4318
        protocol: TCP
      - name: zipkin
        port: 9411
        targetPort: 9411
        protocol: TCP
    stabilityLevel: public-preview
    extraEnv:
      - name: GCLOUD_RW_API_KEY
        valueFrom:
          secretKeyRef:
            name: grafana-cloud-credentials
            namespace: alloy
            key: cloudKey
      - name: GCLOUD_FM_USER
        valueFrom:
          secretKeyRef:
            name: grafana-cloud-credentials
            namespace: alloy
            key: fleetmanagement
      - name: CLUSTER_NAME
        value: local.valesor.dev
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            fieldPath: spec.nodeName
      - name: GCLOUD_FM_COLLECTOR_ID
        value: grafana-k8s-monitoring-$(CLUSTER_NAME)-$(NAMESPACE)-alloy-receiver-$(NODE_NAME)
  remoteConfig:
    enabled: true
    url: https://fleet-management-prod-001.grafana.net
    auth:
      type: basic
      username: sys.env("GCLOUD_FM_USER")
      passwordFrom: sys.env("GCLOUD_RW_API_KEY")
alloy-profiles:
  enabled: true
  alloy:
    stabilityLevel: public-preview
    extraEnv:
      - name: GCLOUD_RW_API_KEY
        valueFrom:
          secretKeyRef:
            name: grafana-cloud-credentials
            namespace: alloy
            key: cloudKey
      - name: GCLOUD_FM_USER
        valueFrom:
          secretKeyRef:
            name: grafana-cloud-credentials
            namespace: alloy
            key: fleetmanagement
      - name: CLUSTER_NAME
        value: local.valesor.dev
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            fieldPath: spec.nodeName
      - name: GCLOUD_FM_COLLECTOR_ID
        value: grafana-k8s-monitoring-$(CLUSTER_NAME)-$(NAMESPACE)-alloy-profiles-$(NODE_NAME)
  remoteConfig:
    enabled: true
    url: https://fleet-management-prod-001.grafana.net
    auth:
      type: basic
      username: sys.env("GCLOUD_FM_USER")
      passwordFrom: sys.env("GCLOUD_RW_API_KEY")
integrations:
  collector: alloy-singleton
  loki:
    instances:
      - name: loki
        namespaces:
          - search
        labelSelectors:
          app.kubernetes.io/name: loki
        logs:
          tuning:
            # extract logfmt fields and set them as structured metadata
            structuredMetadata:
              caller:
              tenant:
              org_id:
              user:
  mimir:
    instances:
      - name: mimir
        namespaces:
          - metrics
        labelSelectors:
          app.kubernetes.io/name: mimir
        logs:
          tuning:
            # extract logfmt fields and set them as structured metadata
            structuredMetadata:
              caller:
              tenant:
              org_id:
              user: