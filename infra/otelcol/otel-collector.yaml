apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/team: sre
    app.kubernetes.io/version: 0.102.0
    app.kubernetes.io/vertical: platform
  name: otelcol-valesor-dev
spec:
  #  args:
  #  feature-gates: -pkg.translator.prometheus.NormalizeName,+receiver.prometheusreceiver.UseCreatedMetric,+receiver.prometheusreceiver.EnableNativeHistograms
  config:
    exporters:
      debug:
        verbosity: detailed
      otlphttp/grafana:
        auth:
          authenticator: basicauth/otlpgrafana
        compression: gzip
        endpoint: ${env:GCS_OTEL_HOST}
        retry_on_failure:
          enabled: true
          initial_interval: 5s
          max_elapsed_time: 600s
          max_interval: 120s
          multiplier: 2
          randomization_factor: 0.7
        timeout: 30s
    extensions:
      basicauth/otlpgrafana:
        client_auth:
          password: ${env:GCS_CLOUD_API_KEY}
          username: ${env:GCS_OTEL_TENANT}
      health_check:
        endpoint: ${env:MY_POD_IP}:13133
        path: /
    processors:
      batch:
        send_batch_max_size: 24000
        send_batch_size: 8000
        timeout: 10s
      k8sattributes/grafana:
        auth_type: serviceAccount
        extract:
          labels:
          - from: pod
            key_regex: app.kubernetes.io/(app|team|vertical|version|cluster_type|component)
            tag_name: $$1
          metadata:
          - container.image.tag
          - k8s.cronjob.name
          - k8s.daemonset.name
          - k8s.deployment.name
          - k8s.job.name
          - k8s.namespace.name
          - k8s.statefulset.name
          - k8s.node.name
          - k8s.pod.name
          - k8s.pod.start_time
          - k8s.pod.uid
        filter:
          node_from_env_var: MY_NODE_NAME
        passthrough: false
        pod_association:
        - sources:
          - from: connection
      memory_limiter:
        check_interval: 60s
        limit_percentage: 80
        spike_limit_percentage: 20
      #resource/grafana:
        #attributes:
        #- action: upsert
        #  key: otelcollector.name
        #  value: otelcol-metrics-poc
        #- action: upsert
        #  key: k8s.cluster.name
        #  value: local.otlp.valesor.dev
        #- action: upsert
        #  key: cluster
        #  value: local.otlp.valesor.dev
        #- action: upsert
        #  key: environment
        #  value: dev
      resourcedetection:
        detectors:
        - env
        - ec2
        - system
        ec2:
          resource_attributes:
            cloud.account.id:
              enabled: true
            cloud.availability_zone:
              enabled: true
            cloud.platform:
              enabled: false
            cloud.provider:
              enabled: false
            cloud.region:
              enabled: true
            host.id:
              enabled: false
            host.image.id:
              enabled: false
            host.name:
              enabled: true
        override: false
        system:
          hostname_sources:
          - os
        timeout: 15s
      #transform/grafana_metrics:
      #  error_mode: ignore
      #  metric_statements:
      #  - context: datapoint
      #    statements:
      #    - set(attributes["cluster"], resource.attributes["cluster"])
      #    - set(attributes["environment"], resource.attributes["environment"])
      #    - set(attributes["appversion"], resource.attributes["version"])
      #    - set(attributes["component"], resource.attributes["component"])
      #    # - set(attributes["team"], attributes["label_app_kubernetes_io_team"])
      #    # - set(attributes["vertical"], attributes["label_app_kubernetes_io_vertical"])
      #    # - delete_key(attributes, "label_app_kubernetes_io_team")
      #    # - delete_key(attributes, "label_app_kubernetes_io_vertical")
    receivers:
      hostmetrics:
        collection_interval: 40s
        root_path: /hostfs
        scrapers:
          cpu:
            metrics:
              system.cpu.logical.count:
                enabled: true
              system.cpu.utilization:
                enabled: true
          disk: null
          filesystem:
            exclude_fs_types:
              fs_types:
              - autofs
              - binfmt_misc
              - bpf
              - cgroup2
              - configfs
              - debugfs
              - devpts
              - devtmpfs
              - fusectl
              - hugetlbfs
              - iso9660
              - mqueue
              - nsfs
              - overlay
              - proc
              - procfs
              - pstore
              - rpc_pipefs
              - securityfs
              - selinuxfs
              - squashfs
              - sysfs
              - tracefs
              match_type: strict
            exclude_mount_points:
              match_type: regexp
              mount_points:
              - /dev/*
              - /proc/*
              - /sys/*
              - /run/k3s/containerd/*
              - /var/lib/docker/*
              - /var/lib/kubelet/*
              - /snap/*
            metrics:
              system.filesystem.utilization:
                enabled: true
          load: null
          memory:
            metrics:
              system.linux.memory.available:
                enabled: true
              system.memory.limit:
                enabled: true
              system.memory.utilization:
                enabled: true
          network: null
          process:
            metrics:
              process.context_switches:
                enabled: false
              process.cpu.utilization:
                enabled: true
              process.disk.operations:
                enabled: true
              process.memory.usage:
                enabled: false
              process.memory.virtual:
                enabled: false
              process.open_file_descriptors:
                enabled: false
            mute_process_cgroup_error: true
            mute_process_exe_error: true
            mute_process_io_error: true
            mute_process_name_error: true
            mute_process_user_error: true
      prometheus/cadvisor:
        config:
          scrape_configs:
          - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            job_name: integrations/kubernetes/cadvisor
            kubernetes_sd_configs:
            - role: node
            metric_relabel_configs:
            - action: keep
              regex: container_cpu_cfs_periods_total|container_cpu_cfs_throttled_periods_total|container_cpu_usage_seconds_total|container_fs_reads_bytes_total|container_fs_reads_total|container_fs_writes_bytes_total|container_fs_writes_total|container_memory_cache|container_memory_rss|container_memory_swap|container_memory_working_set_bytes|container_network_receive_bytes_total|container_network_receive_packets_dropped_total|container_network_receive_packets_total|container_network_transmit_bytes_total|container_network_transmit_packets_dropped_total|container_network_transmit_packets_total|machine_memory_bytes
              source_labels:
              - __name__
            relabel_configs:
            - replacement: kubernetes.default.svc.cluster.local:443
              target_label: __address__
            - regex: (.+)
              replacement: /api/v1/nodes/$${1}/proxy/metrics/cadvisor
              source_labels:
              - __meta_kubernetes_node_name
              target_label: __metrics_path__
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: false
              server_name: kubernetes
      prometheus/kubelet:
        config:
          scrape_configs:
          - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            job_name: integrations/kubernetes/kubelet
            kubernetes_sd_configs:
            - role: node
            metric_relabel_configs:
            - action: keep
              regex: container_cpu_usage_seconds_total|kubelet_certificate_manager_client_expiration_renew_errors|kubelet_certificate_manager_client_ttl_seconds|kubelet_certificate_manager_server_ttl_seconds|kubelet_cgroup_manager_duration_seconds_bucket|kubelet_cgroup_manager_duration_seconds_count|kubelet_node_config_error|kubelet_node_name|kubelet_pleg_relist_duration_seconds_bucket|kubelet_pleg_relist_duration_seconds_count|kubelet_pleg_relist_interval_seconds_bucket|kubelet_pod_start_duration_seconds_bucket|kubelet_pod_start_duration_seconds_count|kubelet_pod_worker_duration_seconds_bucket|kubelet_pod_worker_duration_seconds_count|kubelet_running_container_count|kubelet_running_containers|kubelet_running_pod_count|kubelet_running_pods|kubelet_runtime_operations_errors_total|kubelet_runtime_operations_total|kubelet_server_expiration_renew_errors|kubelet_volume_stats_available_bytes|kubelet_volume_stats_capacity_bytes|kubelet_volume_stats_inodes|kubelet_volume_stats_inodes_used|kubernetes_build_info|namespace_workload_pod|rest_client_requests_total|storage_operation_duration_seconds_count|storage_operation_errors_total|volume_manager_total_volumes
              source_labels:
              - __name__
            relabel_configs:
            - replacement: kubernetes.default.svc.cluster.local:443
              target_label: __address__
            - regex: (.+)
              replacement: /api/v1/nodes/$${1}/proxy/metrics
              source_labels:
              - __meta_kubernetes_node_name
              target_label: __metrics_path__
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: false
              server_name: kubernetes
      prometheus/ksm:
        config:
          scrape_configs:
          - job_name: integrations/kubernetes/kube-state-metrics
            static_configs:
            - targets: ['ksm-kube-state-metrics:8080']
            metric_relabel_configs:
            - action: keep
              regex: kube_daemonset.*|kube_deployment_metadata_generation|kube_deployment_spec_replicas|kube_deployment_status_observed_generation|kube_deployment_status_replicas_available|kube_deployment_status_replicas_updated|kube_horizontalpodautoscaler_spec_max_replicas|kube_horizontalpodautoscaler_spec_min_replicas|kube_horizontalpodautoscaler_status_current_replicas|kube_horizontalpodautoscaler_status_desired_replicas|kube_job.*|kube_namespace_status_phase|kube_node.*|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_pod_container_info|kube_pod_container_resource_limits|kube_pod_container_resource_requests|kube_pod_container_status_last_terminated_reason|kube_pod_container_status_restarts_total|kube_pod_container_status_waiting_reason|kube_pod_info|kube_pod_owner|kube_pod_start_time|kube_pod_status_phase|kube_pod_status_reason|kube_replicaset.*|kube_resourcequota|kube_statefulset.*
              source_labels:
              - __name__
            - action: replace
              regex: (.*)
              replacement: $$1
              source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_team
              target_label: team
            - action: replace
              regex: (.*)
              replacement: $$1
              source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_vertical
              target_label: vertical
            - action: replace
              regex: (.*)
              replacement: $$1
              source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_version
              target_label: version
            - action: replace
              regex: (.*)
              replacement: $$1
              source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_cluster_type
              target_label: cluster_type
            relabel_configs:
            - action: keep
              regex: kube-state-metrics
              source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_name
      prometheus/node:
        config:
          scrape_configs:
          - job_name: integrations/node_exporter
            kubernetes_sd_configs:
            - role: pod
            metric_relabel_configs:
            - action: keep
              regex: node_cpu.*|node_exporter_build_info|node_filesystem.*|node_memory.*|process_cpu_seconds_total|process_resident_memory_bytes
              source_labels:
              - __name__
            - action: replace
              regex: (.*)
              replacement: $$1
              source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_component
              target_label: component
            - action: replace
              regex: (.*)
              replacement: $$1
              source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_team
              target_label: team
            - action: replace
              regex: (.*)
              replacement: $$1
              source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_vertical
              target_label: vertical
            - action: replace
              regex: (.*)
              replacement: $$1
              source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_version
              target_label: version
            - action: replace
              regex: (.*)
              replacement: $$1
              source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_cluster_type
              target_label: cluster_type
            relabel_configs:
            - action: keep
              regex: prometheus-node-exporter.*
              source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_name
            - action: replace
              source_labels:
              - __meta_kubernetes_pod_node_name
              target_label: instance
            - action: replace
              source_labels:
              - __meta_kubernetes_namespace
              target_label: namespace
    service:
      extensions:
      - health_check
      - basicauth/otlpgrafana
      #- basicauth/promgrafana
      pipelines:
        metrics/grafana:
          exporters:
          - debug
          - otlphttp/grafana
          processors:
          - memory_limiter
          # - resource/grafana
          - k8sattributes/grafana
          #- transform/grafana_metrics
          - batch
          receivers:
          - prometheus/ksm
      telemetry:
        logs:
          level: debug
        metrics:
          address: :8888
          level: detailed
  env:
  - name: GOMEMLIMIT
    value: 204MiB
  - name: MY_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: MY_NODE_IP
    valueFrom:
      fieldRef:
        fieldPath: status.hostIP
  - name: MY_POD_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  - name: MY_NAMESPACE_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace
  - name: MY_POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  envFrom:
  - prefix: "GCS_"
    secretKeyRef:
      name: "grafana-cloud-credentials"
  mode: daemonset
  observability:
    metrics:
      enableMetrics: true
  podAnnotations:
    prometheus.io/scrape: "false"
  priorityClassName: system-node-critical
  resources:
    limits:
      memory: 256Mi
    requests:
      cpu: 200m
      memory: 128Mi
  securityContext:
    readOnlyRootFilesystem: true
    runAsNonRoot: true
  #serviceAccount: opentelemetry-collectors
  targetAllocator:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - otelcol-metrics-poc-targetallocator
            topologyKey: kubernetes.io/hostname
          weight: 100
    allocationStrategy: per-node
    enabled: false
    filterStrategy: relabel-config
    nodeSelector:
      Name: system
    observability:
      metrics:
        enableMetrics: true
    prometheusCR:
      enabled: true
      scrapeInterval: 30s
      serviceMonitorSelector: {}
    replicas: 2
    resources:
      limits:
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 128Mi
    #serviceAccount: opentelemetry-collectors
  tolerations:
  - effect: NoSchedule
    operator: Exists
  upgradeStrategy: automatic
  volumeMounts:
  - mountPath: /hostfs
    mountPropagation: HostToContainer
    name: hostfs
    readOnly: true
  volumes:
  - hostPath:
      path: /
    name: hostfs
